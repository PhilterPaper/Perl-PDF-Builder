See also INFO/Changes_2023 for earlier version 3 release logs.

3.027     2024-01-09  UNRELEASED
* = work planned or in progress (not all may make it into this release!)

*   elliptical bogen and rotated ellipses/arcs/ebogens. Probably a new
       examples/Bogens.pl with circular bogen stuff moved over from Content.pl 
       and replaced by rotated arc examples in Content.pl. elliptical bogen
       examples in Bogens.pl. most of the new code and examples already exists.
       bogen() allow old style "extra" settings, but encourage use of new
       hash list as used in bogen_ellip() and add to rotation of elliptical
       arcs and ellipses. update MANIFEST with any new examples. work done for
       SVGPDF package use, so might as well reuse it here.

*   lc() all tags and attribute names in column() no need to do CSS properties
       (would not expect to be anything but lower case) although should also
       lc() tag names in <style> and global CSS inputs. do just first capital 
       tag encountered, rather than giving a message for each different one we 
       find (would need global list of such tags to see which has been flagged 
       already). flag to suppress even this one message.

*   warning that unrecognized HTML tag or CSS property will be ignored (at 
       first occurrence, with flag to suppress reporting... just ignore). it 
       may be possible to salvage child text and just ignore the tag or the 
       property, but in any case, the user should be notified that it's not 
       being processed quite the way they want it to be. what to do if tag
       itself is not supported/recognized, but style settings within it are?
       treat it as a <span>?

*   cleanup of column(), including list markers, dead code (wait to output
       font information, positioning/scale, color, etc. until last moment), 
       CSS text-align. before outputting font changes for <li>, output a 
       <span style="display:block;">marker text</span> before the <li>
       should use the <ul><ol> etc. font properties for the marker since is
       outside of <li></li> block. at some point, new extended properties
       for markers (default to ul, ol, etc. properties).

*   any margin-top or pending margin-bottom at column top should be ignored, 
       not just for <p>

*   column() fix growth of font size in <a>. confirm that indentation etc.
       remains correct when crossing column boundaries (separate column()
       calls with continuation of text).

*   add <img> to column(), with positioning (as CSS compatible as possible) to
       align top/center/baseline/bottom with current text/line ascender-top/
       baseline/descender-bottom PLUS arbitrary point displacement dx and dy
       from current baseline starting point or from vertical alignment 
       setting). Don't forget to expand line max extents as needed.

*   line vertical extents grow as necessary... do we stack them, in case we 
       need to back out text already put down (e.g., see marooned text below)? 
       consider a stack of status information: indices of tags and text used, 
       extents at entry to a tag, etc. wait to delete tags/text elements until 
       line is REALLY finalized -- will need to restore state (including font,
       size, and color) if back out text.

*   some new tag and CSS support in column() esp white-space, pre, br #195
       <sl> and <dl> might be easy enough, too, once I'm happy with lists.
       <code>, <kbd>, <samp>, <var> so PDF::Table code display request done.
       decide what to do about tabs (if proportional font, only absolute
       distance settings, not character counts, make sense).

*   extend CSS for list marker styling (bold italic, color, font, size, etc.).
       default to current ol, ul etc. styling property values, override a
       property if a special extended CSS property encountered (e.g.,
       _marker_weight overrides font_weight). need special names as override
       might be in <ol> etc., or in <li> to override just for a given list
       item (where using font_weight would also hit the text of the item). for 
       example, an ul disc might be color=red to highlight a critical item, 
       but not for all items (e.g., greens and yellows like traffic lights).

*   make sure Docs.pm, Content::Text, and #195 list of supported tags, CSS
       properties, etc. are kept in synch with column() capabilities, as well 
       as changes to examples/ being transferred to site Examples section

*   GnuPlot support (depends on SVG image or PNG image). can do before SVG in.
       build GP file on the fly and/or extend an existing one. temp file for GP,
       temp file for output from gnuplot -- flag to name and preserve, or to
       discard temp file(s).

*   SVG support for image, once SVGPDF finalized. make sure GnuPlot now
       allows SVG output, not just PNG. Make sure prereqs list in README.md,
       Makefile.PL, etc. and docs is updated with SVGPDF and anything else.

*   MathJax support (depends on SVG image). <eqn> tag in column(). as with
       GnuPlot, name and preserve or discard temp output (SVG file).

*   replace all $obj->isa("kind") with UNIVERSAL::isa($obj, "kind"), as it will
       handle simple scalars correctly without blowing up ("isa" against an
       unblessed object).

*   vector (list) set AND get of transform matrix #200

*   remove leading 0's in various integers if encountered #198. test first to
       see if problem in PDF::Builder or in various Readers. Builder should not
       be creating such integers, but should modify them if read in from an
       external producer. The problem is that some decimal integers with 
       leading 0's MAY be misread as OCTAL integers.

*   rationalize and document Named Destination support #202

*   control of precision of coordinate dimensions #196

*   per API2 detect if trying to open a R/O document for writing. also look
       into opening password-protected docs (another API2 ticket?)

---- likely 3.028 or later ---------

*   avoid marooning ( ) etc. at end of line when under different tags (adjacent
       text/no space still splitting because tag changed near end of line). if
       a piece of text is NOT followed by whitespace, need to remember line
       status (vertical extents, etc.) and NOT erase tag and text runs when
       used, until line is finalized and this run of tags/text is either output
       or is deferred to the next line. will depend on whether text can be
       split or otherwise hyphenated. consider first scanning @mytext to find 
       adjacent text, and insert some sort of <nobr> tag into stream? note that 
       a word may still be hyphenated at the end of a line, so <nobr> should 
       only apply to adjacent text and not within words.

*   revised bar code support (depends on new barcode library and SVG image) #48
       requires new product release of large 1D and 2D barcode SVG generator 
       library (as optional prereq for Builder).  replace bar code examples 
       with new library anyway (no need to keep legacy code, which didn't work 
       that well).

*   proper hyphenation (language-dependent), using a new hyphenation library
       as well as tag support for <lang> and <nobr>.

*   real paragraph shaping, perhaps using Text::KnuthPlass.

---- DONE --------------------------

    README.md, contrib/*, examples/*, tools/*, devtools/PDFbuild.pl, 
      devtools/PDFversion.pl, docs/buildDoc.pl
     Bite the bullet and change "my $LAST_UPDATE" to "our $LAST_UPDATE", and
      remove the build-time edit of all these files. .pm file instances were
      already changed earlier during POD structure updates.

    lib/PDF/Builder.pm, lib/PDF/Builder/Resource/XObject/Image/PNG_IPL.pm,
      lib/PDF/Builder/Resource/XObject/Image/TIFF_GT.pm,
      lib/PDF/Builder/Resource/XObject/Image/TIFF/File_GT.pm
     Update Image::PNG::Libpng handling so that SVGPDF library will be able
      to handle inlined PNG images by passing an IO::String "filehandle" from
      File::LoadLines, etc. Also, TIFF (with Graphics::TIFF usage) will now
      accept filehandles (at least, "GLOB" type) as input, and write out a
      temporary file to use. Certain operating systems seem to have trouble
      erasing the temporary file, so temps may build up over time! This area of
      filehandle inputs is still being actively investigated. It appears that
      all image formats except GD (GIF, JPEG, TIFF, TIFF with Graphics::TIFF, 
      PNM, PNG, and PNG with Image::PNG::Libpng) can now be given either a 
      filepath and name, or a Perl filehandle.

    examples/RMtutorial.pl
     Correct font 'Times' to 'Times-Roman' to avoid warning messages.

    lib/PDF/Builder/Content.pm
     Correct placement of content of "object" and in POD elaborate on necessary
      corrections that may be needed.

    lib/PDF/Builder.pm
     Recommend workaround for problems with Adobe Acrobat Reader when 
      displaying decimal (only) page labels (need to specify "start").

    (most .pm files) update POD for more consistent appearance.
    docs/buildDoc.pl put NAVIGATION at top of TOC, since usually now much 
      more in the Table of Contents.
    devtools/PDFbuild.pl updates found to be needed in 3.026 build.
    devtools/html2php.pl updates found to be needed.
    MANIFEST add INFO/Changes_2023.

(see INFO/Changes_2023 for earlier changes)

Note that INFO/Changes-ver_2 (for changes released for PDF::API2, and 
incorporated into PDF::Builder) is NOT being updated any longer. You may
assume that any change logged for API2 has also been incorporated into
Builder, with any exceptions or differences noted here.
